#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#    Pokanalysis
#    Copyright © 2010 Clément Bœsch
#
#    Pokanalysis is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    Pokanalysis is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Pokanalysis.  If not, see <http://www.gnu.org/licenses/>.
#

import sys, pygtk, gtk, pango, pokerom, re

class Core:

    def get_map_pix(self, pkmn_map):
        p1, p2, p3 = [None] * 3
        if pkmn_map['map_pic']:
            w = pkmn_map['map_w'] * 32
            h = pkmn_map['map_h'] * 32
            p1 = gtk.gdk.pixbuf_new_from_data(pkmn_map['map_pic'], gtk.gdk.COLORSPACE_RGB, False, 8, w, h, w * 3)
            p2 = p1.scale_simple(150, 150, gtk.gdk.INTERP_BILINEAR)
            p3 = p2.scale_simple(20, 20, gtk.gdk.INTERP_BILINEAR)
        return p1, p2, p3

    def get_map_str(self, i):
        return 'Map #%03d' % i

    def load_world(self):
        model = self.gui.get_object('treestore_gameinfo')
        self.map_store = {}
        area_id = 1
        for pkmn_map in pokerom.get_maps():
            (p1, p2, p3) = self.get_map_pix(pkmn_map)
            if len(pkmn_map['info']) > 1:
                self.map_store['Area #%d' % area_id] = (pkmn_map, p1, p2)
                area = model.append(None, (p3, 'Area #%d' % area_id, '%d maps' % len(pkmn_map['info'])))
                self.map_nodes['Area #%d' % area_id] = area
                area_id += 1
                for info in pkmn_map['info']:
                    (p1, p2, p3) = self.get_map_pix(info)
                    self.map_store[self.add_info(info, p3, area)] = (info, p1, p2)
            else:
                data = pkmn_map['info'][0]
                self.map_store[self.add_info(data, p3)] = (data, p1, p2)
        self.select_map('Area #1')

    def add_info(self, info, pic, area=None):
        model = self.gui.get_object('treestore_gameinfo')
        map_id = self.get_map_str(info['id'])

        ### Map Header
        map_boxes_y, map_boxes_x = info['map_h'] * 2, info['map_w'] * 2

        self.map_nodes[map_id] = model_map_node = model.append(area, (pic, map_id, '%02X:%04X' % (info['bank-id'], info['addr'])))
        model.append(model_map_node, (None, 'tileset', '0x%02X' % info['tileset']))
        model.append(model_map_node, (None, 'dimensions', '%dx%d ' % (info['map_w'], info['map_h'])))
        model.append(model_map_node, (None, 'map pointer', '%02X:%04X' % (info['bank-id'], info['map-pointer'])))
        model.append(model_map_node, (None, 'text pointer', '%02X:%04X' % (info['bank-id'], info['map-text-pointer'])))
        model.append(model_map_node, (None, 'script pointer', '%02X:%04X' % (info['bank-id'], info['map-script-pointer'])))

        # Connections
        connections = info['connections']
        model_connections_node = model.append(model_map_node, (None, '%d Connections' % len(connections), '-'.join(c['key'] for c in connections)))
        for c_id, c in enumerate(connections):
            c_info = info['connections'][c_id]
            model_connection_node = model.append(model_connections_node, (None, c_info['key'], ''))
            model.append(model_connection_node, (None, 'index', c_info['index']))
            model.append(model_connection_node, (None, 'connected map', '%02X:%04X' % (info['bank-id'], c_info['connected-map'])))
            model.append(model_connection_node, (None, 'current map', '%02X:%04X' % (info['bank-id'], c_info['current-map'])))
            model.append(model_connection_node, (None, 'bigness', c_info['bigness']))
            model.append(model_connection_node, (None, 'map width', c_info['map_width']))
            model.append(model_connection_node, (None, 'x align', c_info['x_align']))
            model.append(model_connection_node, (None, 'y align', c_info['y_align']))
            model.append(model_connection_node, (None, 'window', '%02X:%04X' % (info['bank-id'], c_info['window'])))

        ### Object Data
        model_object_data_node = model.append(model_map_node, (None, 'Object data', '%02X:%04X' % (info['bank-id'], info['object-data'])))
        model.append(model_object_data_node, (None, 'maps border tile', '0x%02x' % info['maps_border_tile']))

        # Warps
        warps_info = info['warps']
        model_warps_node = model.append(model_object_data_node, (None, 'Warps', '(%d)' % len(warps_info)))
        for (warp, warp_data) in enumerate(warps_info):
            model_warp_node = model.append(model_warps_node, (None, warp, ''))
            model.append(model_warp_node, (None, 'x', '%02d/%02d' % (warp_data['x'], map_boxes_x)))
            model.append(model_warp_node, (None, 'y', '%02d/%02d' % (warp_data['y'], map_boxes_y)))
            model.append(model_warp_node, (None, 'to point', '0x%02x' % warp_data['to_point']))
            model.append(model_warp_node, (None, 'to map', '0x%02x' % warp_data['to_map']))

        # Signs
        signs_info = info['signs']
        model_signs_node = model.append(model_object_data_node, (None, 'Signposts', '(%d)' % len(signs_info)))
        for sign, sign_data in enumerate(signs_info):
            model_sign_node = model.append(model_signs_node, (None, sign, ''))
            model.append(model_sign_node, (None, 'x', '%02d/%02d' % (sign_data['x'], map_boxes_x)))
            model.append(model_sign_node, (None, 'y', '%02d/%02d' % (sign_data['y'], map_boxes_y)))
            model.append(model_sign_node, (None, 'text id', '%d' % sign_data['text_id']))

        # Entities
        entities_info = info['entities']
        model_entities_node = model.append(model_object_data_node, (None, 'Entities', '(%d)' % len(entities_info)))
        for entity, entity_data in enumerate(entities_info):
            model_entity_node = model.append(model_entities_node, (None, entity, ''))
            model.append(model_entity_node, (None, 'picture id', '%d' % entity_data['pic_id']))
            model.append(model_entity_node, (None, 'x', '%02d/%02d' % (entity_data['x'], map_boxes_x)))
            model.append(model_entity_node, (None, 'y', '%02d/%02d' % (entity_data['y'], map_boxes_y)))
            model.append(model_entity_node, (None, 'movement 1', '%d' % entity_data['mvt_1']))
            model.append(model_entity_node, (None, 'movement 2', '%d' % entity_data['mvt_2']))
            model.append(model_entity_node, (None, 'text id', '%d' % entity_data['text_id']))
            if 'item_id' in entity_data:
                model.append(model_entity_node, (None, 'item id', '%d' % entity_data['item_id']))
            elif 'trainer_type' in entity_data:
                model.append(model_entity_node, (None, 'trainer type', '%d' % entity_data['trainer_type']))
                model.append(model_entity_node, (None, 'pkmn set', '%d' % entity_data['pkmn_set']))

        return map_id

    def select_map(self, map_id, set_focus=False):
        if map_id not in self.map_store:
            if map_id == self.get_map_str(255):
                map_id = 'Area #1'
            else:
                return

        if set_focus:
            tview = self.gui.get_object('treeview_gameinfo')
            path = tview.get_model().get_path(self.map_nodes[map_id])
            tview.set_cursor(path)
            tview.scroll_to_cell(path, use_align=True, row_align=.5)

        (data, p1, p2) = self.map_store[map_id]
        self.current_map = data['objects']
        wild_pkmn = data.get('wild-pkmn')
        special_items = data.get('special-items')
        self.gui.get_object('image_map').set_from_pixbuf(p1)
        self.gui.get_object('image_mini_map').set_from_pixbuf(p2)

        model = self.gui.get_object('liststore_wild_pkmn')
        model.clear()
        if wild_pkmn:
            for (level, i) in wild_pkmn:
                pkmn = self.pokedex_rom_id[i]
                model.append((pkmn['fmt_name'], level, pkmn['fmt_rom_id'], pkmn['pic']))

        model = self.gui.get_object('liststore_specials')
        model.clear()
        if special_items:
            for (y, x, item_id, itype, faddr) in special_items:
                model.append(('<b>%d</b>' % item_id, x, y, '0x%02X' % itype, '0x%04X' % faddr))

    def on_combobox_asm_bank_changed(self, combobox):
        bank_id = combobox.get_active()
        tbuffer = self.gui.get_object('textview_asm').get_buffer()
        if bank_id not in self.bank_asm:
            self.bank_asm[bank_id] = pokerom.disasm(bank_id)
        tbuffer.set_text(self.bank_asm[bank_id])

    def on_eventbox_image_map_button_press_event(self, widget, event):
        coords = (int(event.x / 16), int(event.y / 16))
        if coords in self.current_map:
            info_data = self.current_map[coords]
            map_id = info_data.get('to_map', None)
            if map_id is not None:
                self.select_map(self.get_map_str(map_id), True)

    def on_eventbox_image_map_motion_notify_event(self, widget, event):
        (x, y) = coords = (int(event.x / 16), int(event.y / 16))
        info = [('X', x), ('Y', y)]
        if coords in self.current_map:
            info_data = self.current_map[coords].items()
            info_data.sort()
            info += info_data
        if 'to_map' in dict(info).keys():
            widget.window.set_cursor(self.focus_cursor)
        else:
            widget.window.set_cursor(None)
        self.gui.get_object('label_mapinfo').set_markup('\n'.join(['<b>%s</b>: %s' % (k.title(), v) for (k, v) in info]))

    def on_treeview_gameinfo_cursor_changed(self, treeview):
        (path, column_focus) = treeview.get_cursor()
        model = treeview.get_model()
        self.select_map(model.get_value(model.get_iter(path), 1))

    def on_treeview_gameinfo_row_activated(self, treeview, path, column):
        model = treeview.get_model()
        value = model.get_value(model.get_iter(path), 2)
        if re.match("[A-F0-9]{2}:[A-F0-9]{4}", value):
            (bank_id, addr) = value.split(':')
            self.gui.get_object('notebook_main').set_current_page(2)
            self.gui.get_object('combobox_asm_banks').set_active(int(bank_id, 16))
            text_buffer = self.gui.get_object('textview_asm').get_buffer()
            text_start_iter = text_buffer.get_start_iter()
            goto_str = 'RO%s%s:%s' % ('M' % bank_id if bank_id < 0x10 else '', bank_id, addr)
            match = text_start_iter.forward_search(goto_str, 0)
            if match:
                text_buffer.select_range(*match)
                mark = text_buffer.create_mark('end', match[0], False)
                self.gui.get_object('textview_asm').scroll_to_mark(mark, 0.05, True, 0.0, 0.1)

    def on_treeview_pokedex_cursor_changed(self, treeview):
        (path, column_focus) = treeview.get_cursor()
        pkmn = self.pokedex[path[0]]
        pic = pkmn['pic'].scale_simple(160, 160, gtk.gdk.INTERP_NEAREST)
        self.gui.get_object('image_pkmn').set_from_pixbuf(pic)
        keys = pkmn['header_values'].keys()
        keys.sort()

        header = ''
        for key in keys:
            v = pkmn['header_values'][key]
            if v > 0xff:
                header += '%s: 0x%04X\n' % (key, v)
            else:
                header += '%s: 0x%02X\n' % (key, v)

        self.gui.get_object('textview_pkmn_info_small').get_buffer().set_text('%s\nHeight: %s\nWeight: %s\n\n%s' %
                (pkmn['class'], pkmn['height'], pkmn['weight'], pkmn['desc']))
        self.gui.get_object('textview_pkmn_info').get_buffer().set_text(
                'ROM ID: 0x%02X\nROM header addr: 0x%06x\n\n[HEADER]\n%s' % (pkmn['rom_id'], pkmn['rom_header_addr'], header))
        self.gui.get_object('label_pkmn').set_markup('#%s <b>%s</b>' % (pkmn['fmt_id'], pkmn['name']))

    def __init__(self):
        if len(sys.argv) != 2:
            print('Usage: %s file' % sys.argv[0])
            return

        pokerom.load_rom(sys.argv[1])

        self.focus_cursor = gtk.gdk.Cursor(gtk.gdk.HAND2)

        self.gui = gtk.Builder()
        self.gui.add_from_file('gui.glade')
        self.gui.connect_signals({
            'on_combobox_asm_bank_changed': self.on_combobox_asm_bank_changed,
            'on_eventbox_image_map_button_press_event': self.on_eventbox_image_map_button_press_event,
            'on_eventbox_image_map_motion_notify_event': self.on_eventbox_image_map_motion_notify_event,
            'on_treeview_gameinfo_cursor_changed': self.on_treeview_gameinfo_cursor_changed,
            'on_treeview_gameinfo_row_activated': self.on_treeview_gameinfo_row_activated,
            'on_treeview_pokedex_cursor_changed': self.on_treeview_pokedex_cursor_changed,
            'on_window_destroy': lambda w: gtk.main_quit(),
        })

        self.pokedex_rom_id = {}
        self.pokedex = pokerom.get_pokedex()
        pokedex_widget = self.gui.get_object('liststore_pokedex')
        w, h = 7 * 8, 7 * 8
        for i, pkmn in enumerate(self.pokedex, 1):
            pic = pkmn['pic']
            pkmn['pic'] = gtk.gdk.pixbuf_new_from_data(pic, gtk.gdk.COLORSPACE_RGB, False, 8, w, h, w * 3) if pic else None
            pkmn['fmt_name'] = '<b>%s</b>' % pkmn['name'].title()
            pkmn['fmt_id'] = '%03d' % i
            pkmn['fmt_rom_id'] = '0x%02X' % pkmn['rom_id']
            pokedex_widget.append((pkmn['fmt_id'], pkmn['fmt_name'], pkmn['pic']))
            self.pokedex_rom_id[pkmn['rom_id']] = pkmn
        self.gui.get_object('treeview_pokedex').set_cursor((0,))

        monospaced_font = pango.FontDescription('monospace')
        self.gui.get_object('textview_asm').modify_font(monospaced_font)
        self.gui.get_object('textview_pkmn_info').modify_font(monospaced_font)
        self.gui.get_object('textview_pkmn_info_small').modify_font(monospaced_font)

        self.bank_asm = {}
        lss_banks = self.gui.get_object('liststore_asm_banks')
        for bank_id in range(64):
            lss_banks.append(('Bank %02X' % bank_id,))
        self.gui.get_object('combobox_asm_banks').set_active(0)

        self.map_nodes = {}
        self.load_world()

        self.run()

    def run(self):
        win = self.gui.get_object('window')
        win.show()
        gtk.main()

Core()
